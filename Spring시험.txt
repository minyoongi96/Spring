1.
1) POJO 기반의 구성으로 일반적인 Java로 코드를 작성하고 실행할 수 있기 때문에 생산성에 유리하고, 코드에 대한 테스트 작업도 유연하게 할 수 있다.
2) 객체와 객체를 분리해서 생성하고, 이러한 객체들을 엮는 작업을 하는 형태 즉, 의존성 주입이 가능하다.
3) 반복적인 코드를 줄이고, 핵심 비즈니스 로직에만 집중할 수 있는 방법인 AOP를 지원한다.
4) 트랜잭션의 관리를 어노테이션이나 XML로 설정할 수 있어서 개발자가 매번 상황에 맞는 코드를 작성할 필요가 없다.

2.
Context root로 지정이 된다. (프로젝트 우클릭 > Properties > Web Project Setting 에서 변경 가능하다.)

3.
DispatcherServlet

4.
POJO

5. 
()안에 들어가는 경로가 현재 클래스 또는 메서드의 기본적인 URL경로가 된다.
GET방식과 POST방식 모두 사용할 수 있으며, @GetMapping, @PostMapping으로 축약해서 사용할 수도 있다.

6.
객체 바인딩

7. 
MyBatis

8.
여러 명의 사용자를 동시에 처리하기 위해 DBCP 매니저가 어느 정도의 연결을 확보해 놓고 Client의 요청이 들어오면 연결해주고, Client의 작업이 끝나면 연결을 다시 DBCP 매니저한테 반환하게 만드는 구조이다.

9.
의존성 주입(DI)

10.
RestContoller